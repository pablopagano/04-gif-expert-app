{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GiftGrid","loading","state","setState","useEffect","imgs","setTimeout","useFetchGifs","console","log","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCJDQ,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,qBAApC,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCJdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACkCC,UAAUH,GAD5C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCAXO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,8BACI,sBAAKc,UAAU,oCAAf,UACI,qBAAKC,IAAOf,EAAKgB,IAAON,IACxB,4BAAIA,UCDPO,EAAW,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEtB,ECHwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAjBAC,qBAAU,WAENxB,EAAQC,GACPtB,MAAK,SAAA8C,GACFC,YAAY,WACRH,EAAS,CACLf,KAAMiB,EACNJ,SAAQ,MAEb,UAIR,CAACpB,IAIGqB,EDrBwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAiBpB,OAfAO,QAAQC,IAAIR,GAgBR,qCACI,qBAAIJ,UAAW,wCAAf,cAAyDhB,KAExDoB,GAAW,mBAAGJ,UAAY,mCAAf,4BACZ,qBAAKA,UAAU,YAAf,SAGSH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEQA,GADEA,EAAIC,aE9BzBkB,EAAe,WAGxB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAOA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OAGpB,aAFA,CAEC,EAAD,CAAsCA,SAAYA,aCpB1E+B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1B3D,M","file":"static/js/main.b3ce7434.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState()\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('')\n        }\n        // setCategories()\n\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n        \n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange= {handleInputChange}\n\n            />\n        </form >\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\n    export const getGifs = async (category) => {\n        const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=nouxxO3MSt51Wx7jmCzb3HKRqjpSyXok`\n        const resp = await fetch(url)\n        const {data} = await resp.json();\n        const gifs = data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        })\n        return gifs;\n    }","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    return (\n        <div>\n            <div className=\"animate__animated animate__fadeIn\">\n                <img src = {url} alt = {title}></img>\n                <p>{title}</p>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n// import { getByTitle } from '@testing-library/dom'\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from '../helpers/GetGifs';\n\nexport const GiftGrid = ({category}) => {\n\n    const {data:images, loading} = useFetchGifs(category);\n\n    console.log(loading)\n    // console.log(data)\n\n    //console.log(category)\n    // const [count, setCount] = useState(0)\n\n    // const [images, setImages] = useState([]);\n\n    // useEffect( () => {\n    // getGifs(category)\n    //     .then(imgs => setImages(imgs));\n    // },[category])\n\n\n    // getGifs(); \n    return (\n        <>\n            <h3 className =\"animate__animated animate__fadeInLeft\">${category}</h3>\n            {/* {loading ? \"...Cargando \" : \"Cargado\"} */}\n            {loading && <p className = \"animate__animated animate__flash\">\"...Cargando \"</p>  }\n            <div className=\"card-grid\">\n                \n                \n                    {images.map( img => (\n                        <GifGridItem \n                            key= {img.id}\n                            {...img}/>))} \n                    \n\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\n\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n  \n        getGifs(category)\n        .then(imgs => {\n            setTimeout( () => {\n                setState({\n                    data: imgs,\n                    loading:false\n                })                \n            }, 3000)\n\n        });\n    \n    }, [category])\n\n\n\n    return state;\n}","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GiftGrid } from './components/GiftGrid'\n\n\nexport const GifExpertApp = () => {\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\n    const [categories, setCategories] = useState(['One Punch']);\n    // console.log(categories)\n    // const handleAdd= () => {\n    //     //setCategories([...categories, 'Otro Punch'])\n    //     setCategories(cats => [...categories, 'Otro Punch'])\n        \n    // }\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            {/* <GiftGrid key= 'ono punch' category= 'ono punch'/> */}\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n            {/* <button onClick= {handleAdd}>Agregar</button> */}\n            <ol>\n                {\n                    categories.map( category => \n                        // return <li key={category}>{category}</li>\n                        (\n                        <GiftGrid                             category = {category}\n\n                        />)\n\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { GifExpertApp } from './GifExpertApp'\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}